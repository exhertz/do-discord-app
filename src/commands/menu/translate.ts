import {
	ActionRowBuilder,
	ApplicationCommandType, ComponentType,
	StringSelectMenuBuilder,
	StringSelectMenuOptionBuilder
} from 'discord.js';
// eslint-disable-next-line import/no-extraneous-dependencies
import translate from 'translatte';
import { MenuCommand } from '../../types.js';

/*
 * if the "translatte" package stops working, alternative is:
 * https://www.npmjs.com/package/google-translate-api
 * https://github.com/matheuss/google-translate-api
 */

const languages = {
	EN: { label: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', emoji: 'üá¨üáß' },
	AR: { label: '–ê—Ä–∞–±—Å–∫–∏–π', emoji: 'üá¶üá™' },
	ES: { label: '–ò—Å–ø–∞–Ω—Å–∫–∏–π', emoji: 'üá™üá∏' },
	IT: { label: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', emoji: 'üáÆüáπ' },
	ZH: { label: '–ö–∏—Ç–∞–π—Å–∫–∏–π', emoji: 'üá®üá≥' },
	DE: { label: '–ù–µ–º–µ—Ü–∫–∏–π', emoji: 'üá©üá™' },
	PL: { label: '–ü–æ–ª—å—Å–∫–∏–π', emoji: 'üáµüá±' },
	PT: { label: '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', emoji: 'üáµüáπ' },
	RO: { label: '–†—É–º—ã–Ω—Å–∫–∏–π', emoji: 'üá∑üá¥' },
	RU: { label: '–†—É—Å—Å–∫–∏–π', emoji: 'üá∑üá∫' },
	TR: { label: '–¢—É—Ä–µ—Ü–∫–∏–π', emoji: 'üáπüá∑' },
	UK: { label: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', emoji: 'üá∫üá¶' },
	FR: { label: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', emoji: 'üá´üá∑' },
	JA: { label: '–Ø–ø–æ–Ω—Å–∫–∏–π', emoji: 'üáØüáµ' }
};

const cmd: MenuCommand = {
	name: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ',
	type: ApplicationCommandType.Message,

	run: async (client, interaction) => {
		try {
			const mainMessage = await interaction.channel.messages.fetch(interaction.targetId);

			const langOptions = Object.keys(languages)
				.map((key) => (
					new StringSelectMenuOptionBuilder()
						.setLabel(languages[key].label)
						.setValue(key)
						.setEmoji(languages[key].emoji)
				));

			const select = new StringSelectMenuBuilder()
				.setCustomId('translate')
				.setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π —è–∑—ã–∫')
				.addOptions(langOptions);

			const row = new ActionRowBuilder()
				.addComponents(select);

			const message = await interaction.reply({
				components: [row],
				ephemeral: true
			});

			const collectorFilter = (i) => {
				i.deferUpdate();
				return i.user.id === interaction.user.id;
			};

			message.awaitMessageComponent({ filter: collectorFilter, componentType: ComponentType.StringSelect, time: 300000 })
				.then(async (i) => {
					if (i.user.id !== interaction.user.id) return;
					if (!languages[i.values[0]]) return;

					const res = await translate(mainMessage.content, { to: i.values[0] });
					await message.edit({ content: `*–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ:*\n${res.text}`, components: [] });
				});
		} catch (e) {
			console.error(e);
			await interaction.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ${e.code}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.`).catch(() => {
				interaction.editReply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ${e.code}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.`);
			});
		}
	}
};

export default cmd;